domain Balls
{
  imports {
    Math;
    Graphics;
  }

  operations {
    distance(first : Point, second : Point) : Real {
      return sqrt(sqr(first.x - second.x) + sqr(first.y - second.y));
    }
    sqrt(x : Real) : Real {
      return Math.sqrt(x);
    }
    sqr(x : Real) : Real {
      return x * x;
    }
    acos(x : Real) : Real {
      return Math.acos(x);
    }
  }

  classes {
    class Point {
      attributes {
        x : Real;
        y : Real;
      }
      operations {
        translate(v : Vector) {
          x = x + v.x;
          y = y + v.y;
        }
        difference(pt : Point) : Vector {
          return new Vector(pt.x - x, pt.y - y);
        }
        distance(pt : Point) : Real {
          return difference(pt).length();
        }
        asVector() : Vector {
          return new Vector(x, y);
        }
      }
    }

    class Vector {
      attributes {
        x : Real;
        y : Real;
      }
      operations {
        constructor(x : Real, y : Real) : Vector {
          this.x = x;
          this.y = y;
        }
        add(v : Vector) : Vector {
          return new Vector(x + v.x, y + v.y);
        }
        scaleBy(s : Real) : Vector {
          return new Vector(x * s, y * s);
        }
        dot(v : Vector) : Real {
          return x * v.x + y * v.y;
        }
        length() : Real {
          return Balls.sqrt(Balls.sqr(x) + Balls.sqr(y));
        }
        theta(v : Vector) : Real {
          return Balls.acos(dot(v) / (length() * v.length()));
        }
        tangent() : Vector {
          return new Vector(y, -x);
        }
      }
    }

    class Line {
      attributes {
        begin : Point;
        end : Point;
      }
      operations {
        length() : Real {
          return Balls.distance(begin, end);
        }
      }
    }

    class Wall {
      attributes {
        line : Line;
      }
    }

    class Ball {
      attributes {
        pos : Point;
        dir : Vector;
        speed : Real;
        radius : Real;
      }
      operations {
        updatePosition(intElapsed : int) {
          pos.translate(dir.scaleBy(speed * intElapsed));
        }
        computeCollision(ball : Ball) : Collision {
          // TODO:
          return null;
        }
        computeCollision(wall : Wall) : Collision {
          // TODO:
          return null;
        }
        computeCollisions() : Collection<Collision> {
          Collection<Collision> result = new Collection<Collision>();
          foreach (ball : Ball in Ball.instances) {
            result.add(computeCollision(ball));
          }
          foreach (wall : Wall in Wall.instances) {
            result.add(computeCollision(wall));
          }
          return result;
        }
      }
    }

    class Box {
      attributes {
        walls : Collection;
      }
      links {
        walls : R1<Wall>;
      }
      invariants {
        fourWalls {
          return walls.count() == 4;
        }
      }
    }

    class Collision {
      attributes {
        time : int;
        target1 : Ball;
        target2 : Either<Ball, Wall>;
      }
    }

    class CollisionManager {
      operations {
      }
      states {
        onCollision(col : Collision) {
          entry {
            // TODO: Respond to collisions correctly.

            // compute next collision of all balls
            var next : Collision;
            var q : Collection<Collision>;
            q.clear();
            foreach (ball : Ball in Ball.Instances) {
              q.concat(ball.ComputeCollisions());
            }
            q.min((x : Collision) => { return x.time; });
            this.sendIn(onCollision, q.time);
          }
          transitions {
            col -> onCollision;
          }
        }
      }
    }

    // Should there be a differentiation between events and other kinds of classes?
    // As far as I can tell: no.
    class PaintEvent {
      attributes {
        frequency : Real;
      }
    }

    class Painter {
      states
      {
        painting(evt : PaintEvent)
        {
          entry
          {
            Clear();
            foreach (ball : Ball in Ball.instances) {
              ball.updatePosition(paintEvent.frequency);
              DrawChord(ball.pos.x, ball.pos.y, ball.pos.radius, 0, pi * 2);
            }
            Render();

            // Resend same signals
            this.sendIn(evt, evt.frequency);
          }
          transitions
          {
            paintEvent -> painting;
          }
        }
      }
    }
  }
}