/*
[realized]
domain Math {
  attributes {
    [readonly]
    pi;
  }
  operations {
    sqrt(Real x, Real y);
  }
}

[realized]
domain JAction {
  classes {
    class Either<T1,T2> {
      operations {
        is<T>() : Bool;
        to<T>() : T;
        getType : Type;
      }
    }
  }
}

            // there is a transform of energy that i have to take care of. Probably speed as well.
            // Note that the computation is really a vector. So speed is a separate composnenbt from
            // direction
            // Don't update the second target if it is simply a wall.
            // va = va + j/ma * n
            // vb = vb - j/mb * n

            /*
              TVector pb1,pb2,xaxis,U1x,U1y,U2x,U2y,V1x,V1y,V2x,V2y;
              double a,b;
              pb1=OldPos[BallColNr1]+ArrayVel[BallColNr1]*BallTime;      // Find Position Of Ball1
              pb2=OldPos[BallColNr2]+ArrayVel[BallColNr2]*BallTime;      // Find Position Of Ball2
              xaxis=(pb2-pb1).unit();              // Find X-Axis
              a=xaxis.dot(ArrayVel[BallColNr1]);   // Find Projection
              U1x=xaxis*a;                         // Find Projected Vectors
              U1y=ArrayVel[BallColNr1]-U1x;
              xaxis=(pb1-pb2).unit();              // Do The Same As Above
              b=xaxis.dot(ArrayVel[BallColNr2]);   // To Find Projection
              U2x=xaxis*b;                         // Vectors For The Other Ball
              U2y=ArrayVel[BallColNr2]-U2x;
              V1x=(U1x+U2x-(U1x-U2x))*0.5;         // Now Find New Velocities
              V2x=(U1x+U2x-(U2x-U1x))*0.5;
              V1y=U1y;
              V2y=U2y;
              for (j=0;j<NrOfBalls;j++)            // Update All Ball Positions
              ArrayPos[j]=OldPos[j]+ArrayVel[j]*BallTime;
              ArrayVel[BallColNr1]=V1x+V1y;        // Set New Velocity Vectors
              ArrayVel[BallColNr2]=V2x+V2y;        // To The Colliding Balls
            */

/*****************************************************************************************/
/***                         Find if any of the current balls                          ***/
/***                intersect with each other in the current timestep                  ***/
/*** Returns the index of the 2 intersecting balls, the point and time of intersection ***/
/*****************************************************************************************/

int FindBallCol(TVector& point, double& TimePoint, double Time2, int& BallNr1, int& BallNr2)
{
  TVector RelativeV;
  TRay rays;
  double MyTime=0.0, Add=Time2/150.0, Timedummy=10000, Timedummy2=-1;
  TVector posi;              // Test All Balls Against Eachother In 150 Small Steps
  for (int i=0;i<NrOfBalls-1;i++)
  {
    for (int j=i+1;j<NrOfBalls;j++)
    {
      RelativeV=ArrayVel[i]-ArrayVel[j];    // Find Distance
      rays=TRay(OldPos[i],TVector::unit(RelativeV));
      MyTime=0.0;

      if ( (rays.dist(OldPos[j])) > 40) continue;   // If Distance Between Centers Greater Than 2*radius
                  // An Intersection Occurred
      while (MyTime<Time2)        // Loop To Find The Exact Intersection Point
      {
        MyTime+=Add;
        posi=OldPos[i]+RelativeV*MyTime;
        if (posi.dist(OldPos[j])<=40)
        {
          point=posi;
          if (Timedummy>(MyTime-Add)) Timedummy=MyTime-Add;
          BallNr1=i;
          BallNr2=j;
          break;
        }
      }
    }
  }

  if (Timedummy!=10000)
  {
    TimePoint=Timedummy;
    return 1;
  }
  return 0;
}

/*
  Sites for billiards balls physics.
    http://archive.ncsa.uiuc.edu/Classes/MATH198/townsend/index.html
    http://www.gamasutra.com/features/20000516/lander_01.htm
    http://www.gamasutra.com/features/20000208/lander_01.htm
    http://www.edenwaith.com/products/pige/tutorials/collision.php
    http://www.flipcode.com/archives/Basic_Collision_Detection.shtml
    http://en.wikipedia.org/wiki/Collision_detection
    http://www.cs.unc.edu/~geom/collide/
    http://www.harveycartel.org/metanet/tutorials/tutorialA.html
*/

