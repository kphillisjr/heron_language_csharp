primitive AccumulateExpr
{
  fields
  {
    acc : System.String;
    init : HeronEngine.Expression;
    each : System.String;
    list : HeronEngine.Expression;
    expr : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive Assignment
{
  fields
  {
    lvalue : HeronEngine.Expression;
    rvalue : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive BinaryOperation
{
  fields
  {
    operand1 : HeronEngine.Expression;
    operand2 : HeronEngine.Expression;
    operation : System.String;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive BoolLiteral
{
  fields
  {
  }
  methods
  {
    ToString() : System.String;
    GetValue() : HeronEngine.HeronValue;
  }
}
primitive CaseStatement
{
  fields
  {
    condition : HeronEngine.Expression;
    statement : HeronEngine.Statement;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive CharLiteral
{
  fields
  {
  }
  methods
  {
    ToString() : System.String;
    GetValue() : HeronEngine.HeronValue;
  }
}
primitive ChooseField
{
  fields
  {
    name : System.String;
    self : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ClassDefn
{
  fields
  {
    name : System.String;
  }
  methods
  {
    GetInheritedClasses() : System.Collections.Generic.IEnumerable`1[HeronEngine.ClassDefn];
    GetImplementedInterfaces() : System.Collections.Generic.IEnumerable`1[HeronEngine.HeronType];
    GetBaseClass() : HeronEngine.ClassDefn;
    AddImplementedInterface(i : HeronEngine.HeronType) : System.Void;
    Implements(i : HeronEngine.InterfaceDefn) : System.Boolean;
    InheritsFrom(c : HeronEngine.ClassDefn) : System.Boolean;
    GetFields() : System.Collections.Generic.IEnumerable`1[HeronEngine.FieldDefn];
    AddMethod(x : HeronEngine.FunctionDefn) : System.Void;
    AddField(x : HeronEngine.FieldDefn) : System.Void;
    GetField(s : System.String) : HeronEngine.FieldDefn;
    GetCtors() : HeronEngine.FunDefnListValue;
    GetAllMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetDeclaredMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetInheritedMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetMethods(name : System.String) : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetModule() : HeronEngine.ModuleDefn;
    GetMethod(name : System.String) : HeronEngine.ExposedMethodValue;
    Equals(obj : System.Object) : System.Boolean;
    GetHashCode() : System.Int32;
    ToString() : System.String;
    GetName() : System.String;
  }
}
primitive CodeBlock
{
  fields
  {
    statements : System.Collections.Generic.List`1[HeronEngine.Statement];
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive DeleteStatement
{
  fields
  {
    expression : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive EnumDefn
{
  fields
  {
    name : System.String;
  }
  methods
  {
    GetAllMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    Equals(obj : System.Object) : System.Boolean;
    GetHashCode() : System.Int32;
    GetMethods(name : System.String) : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetModule() : HeronEngine.ModuleDefn;
    GetMethod(name : System.String) : HeronEngine.ExposedMethodValue;
    GetField(name : System.String) : HeronEngine.FieldDefn;
    ToString() : System.String;
    GetName() : System.String;
  }
}
primitive ExpressionStatement
{
  fields
  {
    expression : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive FieldDefn
{
  fields
  {
    expr : HeronEngine.Expression;
    name : System.String;
    type : HeronEngine.HeronType;
    nullable : System.Boolean;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive FloatLiteral
{
  fields
  {
  }
  methods
  {
    ToString() : System.String;
    GetValue() : HeronEngine.HeronValue;
  }
}
primitive ForEachStatement
{
  fields
  {
    name : System.String;
    collection : HeronEngine.Expression;
    body : HeronEngine.Statement;
    type : HeronEngine.HeronType;
    nullable : System.Boolean;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive FormalArg
{
  fields
  {
    name : System.String;
    type : HeronEngine.HeronType;
    nullable : System.Boolean;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ForStatement
{
  fields
  {
    name : System.String;
    initial : HeronEngine.Expression;
    condition : HeronEngine.Expression;
    next : HeronEngine.Expression;
    body : HeronEngine.Statement;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive FunCall
{
  fields
  {
    funexpr : HeronEngine.Expression;
    args : HeronEngine.ExpressionList;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive FunctionDefn
{
  fields
  {
    name : System.String;
    body : HeronEngine.CodeBlock;
    formals : HeronEngine.FormalArgs;
    parent : HeronEngine.HeronType;
    rettype : HeronEngine.HeronType;
    nullable : System.Boolean;
  }
  methods
  {
    ToString() : System.String;
    GetStatements() : System.Collections.Generic.IEnumerable`1[HeronEngine.Statement];
  }
}
primitive FunExpr
{
  fields
  {
    formals : HeronEngine.FormalArgs;
    body : HeronEngine.CodeBlock;
    rettype : HeronEngine.HeronType;
    nullable : System.Boolean;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive IfStatement
{
  fields
  {
    condition : HeronEngine.Expression;
    ontrue : HeronEngine.Statement;
    onfalse : HeronEngine.Statement;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive Import
{
  fields
  {
    module : System.String;
    alias : System.String;
    args : HeronEngine.ExpressionList;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive InterfaceDefn
{
  fields
  {
    name : System.String;
  }
  methods
  {
    GetAllMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetInheritedInterfaces() : System.Collections.Generic.IEnumerable`1[HeronEngine.InterfaceDefn];
    GetDeclaredMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetInheritedMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    Implements(i : HeronEngine.InterfaceDefn) : System.Boolean;
    GetMethods(name : System.String) : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetModule() : HeronEngine.ModuleDefn;
    GetMethod(name : System.String) : HeronEngine.ExposedMethodValue;
    GetField(name : System.String) : HeronEngine.FieldDefn;
    Equals(obj : System.Object) : System.Boolean;
    GetHashCode() : System.Int32;
    ToString() : System.String;
    GetName() : System.String;
  }
}
primitive IntLiteral
{
  fields
  {
  }
  methods
  {
    ToString() : System.String;
    GetValue() : HeronEngine.HeronValue;
  }
}
primitive MapExpr
{
  fields
  {
    name : System.String;
    list : HeronEngine.Expression;
    yield : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ModuleDefn
{
  fields
  {
    name : System.String;
  }
  methods
  {
    FindClass(s : System.String) : HeronEngine.ClassDefn;
    ContainsClass(s : System.String) : System.Boolean;
    FindInterface(s : System.String) : HeronEngine.InterfaceDefn;
    ContainsInterface(s : System.String) : System.Boolean;
    ContainsEnum(s : System.String) : System.Boolean;
    AddClass(x : HeronEngine.ClassDefn) : System.Void;
    AddInterface(x : HeronEngine.InterfaceDefn) : System.Void;
    AddEnum(x : HeronEngine.EnumDefn) : System.Void;
    GetTypes() : System.Collections.Generic.IEnumerable`1[HeronEngine.HeronType];
    GetClasses() : System.Collections.Generic.IEnumerable`1[HeronEngine.ClassDefn];
    GetInterfaces() : System.Collections.Generic.IEnumerable`1[HeronEngine.InterfaceDefn];
    GetEnums() : System.Collections.Generic.IEnumerable`1[HeronEngine.EnumDefn];
    FindType(s : System.String) : HeronEngine.HeronType;
    FindTypeLocally(s : System.String) : HeronEngine.HeronType;
    AddDotNetType(s : System.String, t : System.Type) : System.Void;
    AddPrimitive(s : System.String, t : HeronEngine.HeronType) : System.Void;
    GetImportedModuleDefns() : System.Collections.Generic.IEnumerable`1[HeronEngine.ModuleDefn];
    GetImports() : System.Collections.Generic.List`1[HeronEngine.ModuleDefn+Import];
    GetInheritedClasses() : System.Collections.Generic.IEnumerable`1[HeronEngine.ClassDefn];
    GetImplementedInterfaces() : System.Collections.Generic.IEnumerable`1[HeronEngine.HeronType];
    GetBaseClass() : HeronEngine.ClassDefn;
    AddImplementedInterface(i : HeronEngine.HeronType) : System.Void;
    Implements(i : HeronEngine.InterfaceDefn) : System.Boolean;
    InheritsFrom(c : HeronEngine.ClassDefn) : System.Boolean;
    GetFields() : System.Collections.Generic.IEnumerable`1[HeronEngine.FieldDefn];
    AddMethod(x : HeronEngine.FunctionDefn) : System.Void;
    AddField(x : HeronEngine.FieldDefn) : System.Void;
    GetField(s : System.String) : HeronEngine.FieldDefn;
    GetCtors() : HeronEngine.FunDefnListValue;
    GetAllMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetDeclaredMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetInheritedMethods() : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetMethods(name : System.String) : System.Collections.Generic.IEnumerable`1[HeronEngine.FunctionDefn];
    GetModule() : HeronEngine.ModuleDefn;
    GetMethod(name : System.String) : HeronEngine.ExposedMethodValue;
    Equals(obj : System.Object) : System.Boolean;
    GetHashCode() : System.Int32;
    ToString() : System.String;
    GetName() : System.String;
  }
}
primitive Name
{
  fields
  {
    name : System.String;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive NewExpr
{
  fields
  {
    type : HeronEngine.HeronType;
    args : HeronEngine.ExpressionList;
    module : System.String;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive NullExpr
{
  fields
  {
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ParanthesizedExpr
{
  fields
  {
    expr : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive PostIncExpr
{
  fields
  {
    expr : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ProgramDefn
{
  fields
  {
    name : System.String;
  }
  methods
  {
    AddModule(m : HeronEngine.ModuleDefn) : System.Void;
    GetGlobal() : HeronEngine.ModuleDefn;
    GetModules() : System.Collections.Generic.IEnumerable`1[HeronEngine.ModuleDefn];
    GetModule(s : System.String) : HeronEngine.ModuleDefn;
    ToString() : System.String;
  }
}
primitive ReadAt
{
  fields
  {
    self : HeronEngine.Expression;
    index : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive RecordExpr
{
  fields
  {
    fields : HeronEngine.ExpressionList;
    fielddefs : HeronEngine.FormalArgs;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ReduceExpr
{
  fields
  {
    a : System.String;
    b : System.String;
    list : HeronEngine.Expression;
    yield : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive ReturnStatement
{
  fields
  {
    expression : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive SelectExpr
{
  fields
  {
    name : System.String;
    list : HeronEngine.Expression;
    predicate : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive StringLiteral
{
  fields
  {
  }
  methods
  {
    ToString() : System.String;
    GetValue() : HeronEngine.HeronValue;
  }
}
primitive SwitchStatement
{
  fields
  {
    condition : HeronEngine.Expression;
    cases : System.Collections.Generic.List`1[HeronEngine.Statement];
    ondefault : HeronEngine.Statement;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive TableExpr
{
  fields
  {
    rows : System.Collections.Generic.List`1[HeronEngine.ExpressionList];
    fielddefs : HeronEngine.FormalArgs;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive TupleExpr
{
  fields
  {
    exprs : HeronEngine.ExpressionList;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive UnaryOperation
{
  fields
  {
    operand : HeronEngine.Expression;
    operation : System.String;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive VarDesc
{
  fields
  {
    name : System.String;
    type : HeronEngine.HeronType;
    nullable : System.Boolean;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive VariableDeclaration
{
  fields
  {
    vardesc : HeronEngine.VarDesc;
    value : HeronEngine.Expression;
  }
  methods
  {
    ToString() : System.String;
  }
}
primitive WhileStatement
{
  fields
  {
    condition : HeronEngine.Expression;
    body : HeronEngine.Statement;
  }
  methods
  {
    ToString() : System.String;
  }
}
