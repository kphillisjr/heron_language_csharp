module TestAll
{
	imports
	{
		Factorial = new Factorial();
		Fibonacci = new Fibonacci();
		HelloWorld = new HelloWorld();
        NQueens = new NQueens();
		PrettyPrinting = new PrettyPrinting();
		Sieve = new Sieve();
		Squares = new Squares();
        TestAutoCtor = new TestAutoCtor();
		TestClosures = new TestClosures();
		TestConstructor = new TestConstructor();
		TestDuckTyping = new TestDuckTyping();
		TestField = new TestField();
		TestForLoop = new TestForLoop();
		TestFunctionCall = new TestFunctionCall();
		TestIf = new TestIf();
		TestImport = new TestImport();
		TestInheritance = new TestInheritance();
		TestInheritedConstructors = new TestInheritedConstructors();
		TestInterfaces = new TestInterfaces();
        TestMap = new TestMap();		
        TestModuleInheritance = new TestModuleInheritance();
		TestOutput = new TestOutput();
		TestRandom = new TestRandom();
		TestReduce = new TestReduce();
        TestReturn = new TestReturn();
		TestStatic = new TestStatic();
        TestTables = new TestTables();
        TestViewport = new TestViewport();
		TestWhile = new TestWhile();
	}
	methods
	{
		Main()
		{
			Factorial.Main();
			Fibonacci.Main();
			HelloWorld.Main();
			PrettyPrinting.Main();
			Sieve.Main();
			Squares.Main();
			TestClosures.Main();
			TestConstructor.Main();
			TestDuckTyping.Main();
			TestField.Main();
			TestForLoop.Main();
			TestFunctionCall.Main();
			TestIf.Main();
			TestImport.Main();
			TestInheritance.Main();
			TestInheritedConstructors.Main();
			TestInterfaces.Main();
			TestModuleInheritance.Main();
			TestOutput.Main();
			TestRandom.Main();
			TestReturn.Main();
			TestStatic.Main();
			TestWhile.Main();
		}
	}
}