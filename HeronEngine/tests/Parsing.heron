module Parsing
{	
	fields 
	{
		lowerCaseLetter = new CharRangeRule('a','z');
		upperCaseLetter = new CharRangeRule('A','Z');
		letter = new ChoiceRule([lowerCaseLetter, upperCaseLetter]);
		number = new CharRangeRule('0', '9');
		identFirstChar = new ChoiceRule([letter, new SingleCharRule('_')]);
		identNextChar = new ChoiceRule([identFirstChar, number]);
		whiteSpace = new CharSetRule(" \t\r\n");
		nonWhiteSpace = AnyCharExcept(); 				
	}
	methods
	{
		AnyCharExcept(r : IRule)
		{
			return new SeqRule(new NotRule(r), new AnyCharRule());
		}
		MatchRuleFrom(s : String, n : Int, r : IRule) : String
		{
		} 	
		Tokenize(s : String, delim : IRule) : Seq
		{
			
		}
		Test(s : String)
		{
			
		}			
	}
}

interface IParserState
{
	GetCurrent() : Char;
	MoveNext();
	GetPos() : Int;
	SetPos(n : Int);
	AtEnd() : Bool;
}
	
class ParserState
{
	implements 
	{
		IParserState;
	}
	fields
	{
		text : String;
		pos : Int;
	}
	methods
	{
		Constructor(text : String, pos : Int)
		{
			this.text = text;
			this.pos = pos;
		}				
		GetCurrent() : Char
		{
			return text.GetChar(pos);
		}
		MoveNext()
		{
			pos++;
		}
		GetPos() : Int
		{
			return pos;
		}
		SetPos(n : Int)
		{
			pos = n;
		}
		AtEnd() : Bool
		{
			return pos >= text.Length();
		}			
	}
}

interface IRule
{
	methods
	{
		Match(p : IParserState) : Bool;
	}
}	

class MultiRuleOp
{
	fields
	{
		rules : List;
	}
	methods
	{
		Constructor(xs : Seq)
		{
			rules = xs.ToList();
		}			
		Constructor()
		{
			rules = new List();
		}				
		GetRules() : List
		{
			return rules;
		}
	}
}

class SingleRuleOp
{
	fields
	{
		rule : IRule;
	}
	methods
	{
		Constructor(r : IRule)
		{
			rule = r;
		}
		GetRule() : IRule
		{
			return rule;
		}
	}
}

class SeqRule
{
	inherits
	{
		MultiRuleOp;
	}
	implements 
	{
		IRule;
	}
	methods		
	{
		Match(p : IParserState) : Bool
		{
			var pos = p.GetPos();
			foreach (r : IRule in GetRules())
				if (!r.Match(p))
				{
					p.SetPos(pos);
					return false;
				}
			return true;						
		}
	}
}

class ChoiceRule
{
	inherits
	{
		MultiRuleOp;
	}
	implements 
	{
		IRule;
	}
	methods		
	{
		Match(p : IParserState) : Bool
		{
			foreach (r : IRule in GetRules())
				if (r.Match(p))
					return true;
			return false;						
		}
	}
}

class NotRule
{
	inherits 
	{
		SingleRuleOp;
	}
	implements
	{
		IRule;
	}
	methods
	{
		Match(p : IParserState) : Bool
		{
			var nPos = p.GetPos();
			if (!GetRule().Match(p))
				return true;
			p.SetPos(nPos);
			return false;
		}
	}
}

class CharSetRule
{
	implements 
	{
		IRule;
	}
	fields
	{
		chars : String;
	}
	methods
	{
		Constructor(s : String)
		{
			chars = s;
		}
		Match(p : ParserState) : Bool
		{
			if (p.AtEnd())
				return false;
			foreach (c : Char in chars)
				if (c == p.GetCurrent()) 
				{
					p.MoveNext();
					return true;
				}
			return false;
		}
	}
}
	
class CharRule
{
	implements 
	{
		IRule;
	}
	fields
	{
		char;
	}
	methods
	{
		Constructor(c : Char)
		{
			char = c;
		}
		Match(p : ParserState) : Bool
		{
			if (p.AtEnd())
				return false;
			if (p.GetCurrent() != c)
				return false;
			p.MoveNext();
			return true;			
		}
	}
}

class CharRangeRule
{
	implements 
	{
		IRule;
	}
	fields
	{
		first : Char;
		last : Char;
	}
	methods
	{
		Constructor(first : Char, last : Char)
		{
			this.first = first;
			this.last = last;				
		}
			
		Match(p : IParserState) : Bool
		{
			if (p.AtEnd())
				return false;
			if (p.GetCurrent() < first)
				return false;
			if (p.GetCurrent() > last)
				return false;
			return true;
		}
	}
}

class AnyCharRule
{
	implements
	{
		IRule;
	}
	methods
	{				
		Match(p : IParserState) : Bool
		{
			if (p.AtEnd())
				return false;
			p.MoveNext();
			return true;
		}						
	}
}
