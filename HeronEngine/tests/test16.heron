module PrettyPrinting
{
	class PrettyPrinter 
	{
		fields
		{
			indent : String;
			atNewLine : Bool;
		}
		methods
		{		
			Constructor()
			{
				indent = new String();
				atNewLine = false;
			}
			Write(s : String)
			{
				if (atNewLine)
				{
					atNewLine = false;
					Console.WriteLine();
					Console.Write(indent);
				} 
				Console.Write(s);
			}			
			WriteLine(s : String)
			{
				Write(s);
				atNewLine = true;
			}
			BracesAround(f : Function)
			{
				WriteLine("{");
				var old_indent = indent;
				indent = indent + "  ";
				f();
				indent = old_indent;				
				WriteLine("}");
			}			
		}			
	}
	
	class Meta 
	{
		inherits 
		{
			PrettyPrinter;
		}
		methods
		{					
			Constructor(program : HeronProgram)
			{
				base.Constructor();
				foreach (m in program.GetModules())
					Output(m);
			}
			OutputAll(xs : Seq)
			{
				foreach (x in xs)
					Output(x);
			}						
			Output(m : HeronModule)
			{
				Write("module ");
				WriteLine(m.name);
				BracesAround(
					function() 
					{
						OutputAll(m.GetClasses());
						OutputAll(m.GetInterfaces());
						OutputAll(m.GetEnums());
					}
				);	
			}
			OutputSection(name : String, xs : Seq)
			{
				WriteLine(name);
				BracesAround(
					function() {
						OutputAll(xs);
					});
			}
			OutputDelimited(xs : List, sDelim : String)
			{
				foreach (i in 0..xs.Count() - 1) {
					if (i > 0)
						Write(sDelim);
					Output(xs[i]);
				}
			}
			Output(c : HeronClass)
			{
				Write("class ");				
				WriteLine(c.name);
				OutputSection("inherits", c.GetInheritedTypes());
				OutputSection("implements", c.GetImplementedInterfaces());				
				OutputSection("fields", c.GetFields());
				OutputSection("methods", c.GetMethods());
			}
			Output(i : HeronInterface)
			{
				Write("interface ");
				WriteLine(i.name);
				WriteLine("{ }");												
			}
			Output(e : HeronEnum)
			{
				Write("enum ");
				WriteLine(e.name);
				WriteLine("{ }");
			}
			Output(f : FieldDefn)
			{
				Write(f.name);
				OutputTypeDecl(f.type);
				WriteLine(";");			
			}
			Output(t : Type)
			{
				Write(t.ToString());
			}
			OutputTypeDecl(t : Type)
			{
				if (t.name != "Void")
					Write(" : " + t.name); 
			}
			Output(m : FunctionDefn)
			{
				Write(m.name);
				Write("(");
				OutputDelimited(m.formals, ", ");
				Write(")");
				OutputTypeDecl(m.rettype);
				Output(m.body);
			}
			Output(fa : FormalArg)
			{
				Write(fa.name);
				OutputTypeDecl(fa.type);
			}
			Output(s : Statement)
			{
			
			}
		}
	}
	
	enum TestEnum
	{
		EnumValue1;
		EnumValue2;
	}
	
	interface TestInterface
	{
		methods 
		{
			F();
			G(x : Int, y : Int) : Int;
		}
	}
	
	class TestClass
	{
		fields
		{
			x : Int;
			y : Int;
		}
		methods
		{
			F(a : Int) : Int
			{
				x = a;
				return y;
			}
		}
	}		
}

