module AstWalking
{
	methods
	{
	}
}

class Name
{
    fields
    {
        name : String;
        defn : Any;
        uses : List;
    }
}

class Scope
{
    fields
    {   
        declaredNames : Seq;
        usedNames : Seq;        
    }
}

interface IAstVisitor
{
}

class NameResolver
{
	fields
	{
	    IAstVisitor v;
        program : ProgramDefn?;
        module : ModuleDefn?;
        class : ClassDefn?;
        interface : InterfaceDefn?;
        enum : EnumDefn?;
        function : FunctionDefn?;
        statementStack : List;
        scopeStack : List;
	}
	methods
	{	
	    Constructor(IAstVisitor v)
	    {
	        this.v = v;
	        env = new Environment;	        
	        // TODO: after a constructor, make sure everything is created. 
	    }
	    Visit(x : ProgramDefn)
	    {
	        program = x;
	        foreach (m in x.GetModules())
	            v.Visit(m);
	        program = null;
	    }	
	    Visit(x : ModuleDefn)
	    {	       
	        module = x;
	        foreach (a in x.GetInherits())
	            v.VisitBaseModule(a);
	        foreach (a in x.GetImports())
	            v.Visit(a);
	        foreach (a in x.GetMethods())
	            v.Visit(a);
	        foreach (a in x.GetFields())
	            v.Visit(a);
	        foreach (a in x.GetClasses())
	            v.Visit(a);
	        foreach (a in x.GetInterfaces())
	            v.Visit(a);
	        foreach (a in x.GetEnums())
	            v.Visit(a);
	        module = null;	            	            
	    }
		Visit(x : ClassDefn)
		{
		    class = x;
	        foreach (a in x.GetMethods())
	            v.Visit(a);
	        foreach (a in x.GetFields())
	            v.Visit(a);
	        v.VisitBaseClass(x.GetBaseClass());
	        class = null;
		}
		Visit(x : InterfaceDefn)
		{
		    interface = x;
	        foreach (a in x.GetMethods())
	            v.Visit(a);
	        foreach (a in x.GetBaseInterfaces())
	            v.VisitInheritedInterface(a);
	        interface = null;
		}
		Visit(x : EnumDefn)
		{
		    enum = x;
		    foreach (a in x.GetValues())
		        v.VisitEnumValue(a);
		    enum = null;		        
		}	
		Visit(x : FunctionDefn)
		{
		    function = x;
		    
		    function = null;
		}	
		Visit(x : FieldDefn)
		{
		}
		Output(t : Type)
		{
			Write(t.ToString());
		}
		OutputTypeDecl(t : Type)
		{
			if (t != null && t.name != "Void")
				Write(" : " + t.name); 
		}
		Output(m : FunctionDefn)
		{
			Write(m.name);
			Write("(");
			OutputList(m.formals, ", ");
			Write(")");
			OutputTypeDecl(m.rettype);
			WriteLine();
			Output(m.body);
		}
		Output(i : Import)
		{
		}
		Output(fa : FormalArg)
		{
			Write(fa.name);
			OutputTypeDecl(fa.type);
		}			
		OutputIndentedStatement(x)
		{
			if (x is CodeBlock)
				Output(x);
			else
				Indent(function() { Output(x); });
		}
		Output(x : VariableDeclaration)
		{
			Write("var ");
			Write(x.name);
			Write(" ");
			OutputTypeDecl(x.type);
			if (x.value != null)
			{
				Write(" = ");
				Output(x.value);
			}
			WriteLine(";");
		}
		Output(x : DeleteStatement)
		{
			Write("delete ");
			Output(x.expression);
			WriteLine(";");
		}
		Output(x : ExpressionStatement)
		{
			Output(x.expression);
			WriteLine(";");
		}
		Output(x : ForEachStatement)
		{
			Write("foreach (");
			Write(x.name);
			OutputTypeDecl(x.type);
			Write(" in ");
			Output(x.collection);
			WriteLine(")");
			OutputIndentedStatement(x.body);
		}
		Output(x : ForStatement)
		{
			Write("for (");
			Write(x.name);
			Write(" = ");
			Output(x.initial);
			Write("; ");
			Output(x.condition);
			Write("; ");
			Output(x.next);
			WriteLine(")");
			OutputIndentedStatement(x.body);
		}
		Output(x : CodeBlock)
		{
			BracesAround(
				function() {
					foreach (s in x.statements)
						Output(s);
					}
				);
		}
		Output(x : IfStatement)
		{
			Write("if (");
			Output(x.condition);
			WriteLine(")");
			OutputIndentedStatement(x.ontrue);
			if (x.onfalse != null)
			{
				WriteLine("else");
				OutputIndentedStatement(x.onfalse);
			}
		}
		Output(x : WhileStatement)
		{
			Write("while (");
			Output(x.condition);
			WriteLine(")");
			OutputIndentedStatement(x.body);
		}
		Output(x : ReturnStatement)
		{
			Write("return ");
			Output(x.expression);
			WriteLine(";");
		}
		Output(x : SwitchStatement)
		{
			Write("switch (");
			Output(x.condition);
			WriteLine(")");
			WriteLine("{");
			foreach (x in cases)
				Output(x);
			if (x.ondefault != null)
			{
				WriteLine("default");
				Output(x.ondefault);
			}
			WriteLine("}");
		}
		Output(x : CaseStatement)
		{
			Write("case (");
			Output(x.condition);
			WriteLine(")");
			OutputIndentedStatement(x.statement);
		}
		Output(x : Assignment)
		{
			Output(x.lvalue);				
			Write(" = ");
			Output(x.rvalue);
		}
		Output(x : ChooseField)
		{
			Output(x.self);
			Write(".");
			Write(x.name);
		}
		Output(x : ReadAt)
		{
			Output(x.self);
			Write("[");
			Output(x.index);
			Write("]");
		}
		Output(x : NewExpr)
		{
			Write("new ");
			Output(x.type);
		}
		Output(x : NullExpr)
		{
			Write(x.ToString());
		}
		Output(x : IntLiteral)
		{
			Write(x.ToString());
		}
		Output(x : BoolLiteral)
		{
			Write(x.ToString());
		}
		Output(x : FloatLiteral)
		{
			Write(x.ToString());
		}
		Output(x : CharLiteral)
		{
			Write(x.ToString());
		}
		Output(x : StringLiteral)
		{
			Write(x.ToString());
		}
		Output(x : Name)
		{
			Write(x.ToString());
		}
		Output(x : FunCall)
		{
			Output(x.funexpr);
			Write("(");
			OutputList(x.args, ", ");	
			Write(")");
		}
		Output(x : UnaryOperation)
		{
			Write(x.operation);
			Output(x.operand);
		}
		Output(x : BinaryOperation)
		{
			Output(x.operand1);
			Write(" " + x.operation + " ");
			Output(x.operand2);
		}
		Output(x : AnonFunExpr)
		{
			Write("function (");				
			OutputList(x.formals, ", ");
			Write(") ");
			OutputTypeDecl(x.rettype);
			WriteLine("");
			Indent(function() { Output(x.body); });
			
		}
		Output(x : PostIncExpr)
		{
			Output(x.expr);
			Write("++");
		}
		Output(x : SelectExpr)
		{
			Write("select (");
			Write(x.name);
			Write(" from ");
			Output(x.list);
			Write(") ");
			Output(x.predicate);
		}
		Output(x : MapEachExpr)
		{
		    CurrentScope.AddNewName(x.name, x);
			Write("mapeach (");
			Write(x.name);
			Write(" in ");
			Output(x.list);
			Write(") ");
			Output(x.yield);
		}
		Visit(x : AccumulateExpr)
		{
		    new Scope();
			Write("accumulate (");
			Write(x.acc);
			Write(" = ");
			Output(x.init);
			Write(" forall ");
			Write(x.each);
			Write(" in ");
			Output(x.list);
			WriteLine(")");
			Output(x.expr);
		}
		Visit(x : TupleExpr)
		{		   
		}
	}
}
