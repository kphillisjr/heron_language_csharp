module PrettyPrint
{
	class PrettyPrinter
	{
		methods
		{
			Constructor(output)
			{
				this.output = output;
				tab = "  ";
			}			
			PrintString(s : String) 
			{
				output.Write(s);
			}
			PrintLine(s : String, indent : String)
			{
				output.WriteLine(s);
				output.Write(indent);
			}			
			PrintModule(m : Module, indent : String)
			{
				PrintString("module ");
				PrintLine(m.name, indent);
				PrintLine("{", indent + tab);
				foreach (c : Class in m.classes)
					PrintClass(c, indent + tab);
				PrintLine("}", indent);				
			}
			PrintStatement(x : Any, indent : String)
			{
				switch (typeof(x))
				{
					case (VariableDeclaration)
					{
					    var s = x as VariableDeclaration;
						PrintString("var " + s.name);
						if (s.value != null)	
						{
							PrintString(" = ");
							PrintExpression(s.value);
						}
						PrintLine(";", indent);
					}						
					case (DeleteStatement)
					{
						var s = x as DeleteStatement;
						PrintString("delete " + s.expression);
						PrintLine(";", indent);
					}
					case (ExpressionStatement)
					{
						var s = x as ExpressionStatement;
						PrintExpression(s.expression);
						PrintLine(";", indent);						
					}
					case (ForEachStatement)
					{
						var s = x as ForEachStatement;
						PrintString("foreach (");
						PrintString(s.name);
						PrintString(" in ");
						PrintExpression(s.collection);
						PrintLine(")", indent);
						PrintStatement(s.body, indent + tab);
					}
					case (ForStatement)
					{
						var s = x as ForStatement;
						PrintString("for (");
						PrintString(s.name);
						PrintString(" = ");
						PrintExpression(s.initial);
						PrintString("; ");
						PrintExpression(s.condition);
						PrintString("; ");						
						PrintExpression(s.next);
						PrintLine(")", indent);
						PrintStatement(s.body);					
					}
					case (CodeBlock)
					{
						var s = x as CodeBlock;					
						PrintLine("{", indent);
						foreach (child in s.statements) 
							PrintStatement(child, indent + tab);
						PrintLine("}", indent);
					}
					case (IfStatement)
					{
						var s = x as IfStatement;
						PrintString("if (");
						PrintExpression(s.condition);
						PrintLine(")");
						PrintStatement(s.ontrue);
						if (s.onfalse != null)
						{
							PrintString("else");
							PrintStatement(s.onfalse);							
						}
					}
					case (WhileStatement)
					{
						var s = x as WhileStatement;
						PrintString("while (");
						PrintExpression(s.condition);
						PrintLine(")", indent);
						PrintStatement(s.body);
					}
					case (ReturnStatement)
					{
						var s = x as ReturnStatement;
						PrintString("return ");
						PrintExpression(s.expression);
						PrintLine(";", indent);						
					}
					case (SwitchStatement)
					{
						var s = x as SwitchStatement;
						PrintString("switch (");
						PrintExpression(s.expression);
						PrintLine(") {", indent);
						foreach (c in s.cases)
							PrintLine(c.expression, indent + tab);
						if (s.ondefault != null)
							PrintStatement(s.ondefault);
						PrintLine("}", indent);
					}
					case (CaseStatement)
					{
						var s = x as CaseStatement;
						PrintString("case (");
						PrintExpression(s.expression);
						PrintLine(")", indent);
						PrintStatement(s.statement);
					}
					default
					{
						Print("unrecognized statement : ");
						Print(s.ToString());						
					}
				}
			}
			PrintExpression(e : Expression)
			{
				Print(e.ToString());				
			}			
			PrintClass(c : Class, indent : String)
			{
			}
		}
		fields
		{
			output : Object;
			tab : String;
		}
	}

	class Precompile
	{
		methods
		{
			Constructor(tree : AbstractSyntaxTree)
			{				
				var out = StdTextOut.GetInstance();
				var pp = new PrettyPrinter(out);
				
				foreach (m in tree.modules) 
				{
					pp.PrintModule(m, "");
				}
			}
		}
	}
	
	class Main
	{		
	}
}