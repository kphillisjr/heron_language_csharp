AccumulateExpr ::== (<accumulate> + WS + <(>! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + Initializer! + <forall>! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + <in>! + WS! + NestedExpr! + <)>! + WS! + NestedExpr!)
Annotation ::== Expr
Annotations ::== (<[> + WS + (Annotation + (<,> + WS + Annotation!)*)?! + <]>! + WS!)
AnonFxn ::== (<function> + WS + ArgList! + TypeDecl?! + CodeBlock!)
AnyChar ::== .
Arg ::== (Name + TypeDecl?)
ArgList ::== (<(> + WS + (Arg + (<,> + WS + Arg!)*)? + <)>! + WS!)
BasicExpr ::== (NewExpr | MapEachExpr | SelectExpr | AccumulateExpr | AnonFxn | SpecialName | Name | Literal | ParanthesizedExpr | BracketedExpr)
BinaryDigit ::== [01]
BinaryLiteral ::== (<0b> + BinaryValue!)
BinaryValue ::== BinaryDigit+
BlockComment ::== (</*> + (CloseFullComment^ + AnyChar)*! + CloseFullComment!)
BracketedExpr ::== (<[> + WS + Expr?! + <]>! + WS!)
CaseGroup ::== CaseStatement*
CaseStatement ::== (<case> + WS + ParanthesizedExpr! + CodeBlock!)
CharLiteral ::== (['] + StringCharLiteral + ['])
Class ::== (Annotations? + <class> + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + ClassBody)
ClassBody ::== (<{>! + WS! + Inherits?! + Implements?! + Fields?! + Methods?! + <}>! + WS!)
CloseFullComment ::== <*/>
CodeBlock ::== (<{> + WS + DelayedStatement* + <}>! + WS!)
Comment ::== (BlockComment | LineComment)
DefaultStatement ::== (<default> + WS + CodeBlock!)
DelayedStatement ::== Statement
DeleteStatement ::== (<delete> + WS + Expr! + <;>! + WS!)
Digit ::== [0..9]
ElseStatement ::== (<else> + WS + DelayedStatement!)
EmptyMethod ::== (FunDecl + <;>! + WS!)
EmptyMethods ::== (<methods> + WS + <{>! + WS! + EmptyMethod*! + <}>!! + WS!!)
EmptyStatement ::== Eos
EndOfInput ::== _eof_
Enum ::== (Annotations? + <enum> + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + EnumValues!)
EnumValue ::== (Name + Eos)
EnumValues ::== (<{> + WS + EnumValue* + <}>! + WS!)
Eos ::== (<;> + WS)
EOSOrCodeBlock ::== (Eos | CodeBlock)
EOW ::== IdentNextChar^
EscapeChar ::== ([\] + AnyChar)
Expr ::== BasicExpr+
ExprStatement ::== (Expr + Eos)
Field ::== (Name + TypeDecl? + Initializer? + Eos)
Fields ::== (<fields> + WS + <{>! + WS! + Field*! + <}>!! + WS!!)
File ::== (Module + EndOfInput)
FloatLiteral ::== ([-]? + Digit+ + [.] + Digit+)
ForEachParams ::== (<(>! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + TypeDecl?! + <in>! + WS! + Expr! + <)>! + WS!)
ForEachStatement ::== (<foreach> + WS + <(>!! + WS!! + (SpecialDelimiter^ + (Symbol | Ident))!! + WS!! + TypeDecl?!! + <in>!! + WS!! + Expr!! + <)>!! + WS!! + DelayedStatement!)
ForParams ::== (<(>! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + <=>! + WS! + Expr!! + <;>! + WS! + Expr! + <;>! + WS! + Expr! + <)>! + WS!)
ForStatement ::== (<for> + WS + <(>!! + WS!! + (SpecialDelimiter^ + (Symbol | Ident))!! + WS!! + <=>!! + WS!! + Expr!!! + <;>!! + WS!! + Expr!! + <;>!! + WS!! + Expr!! + <)>!! + WS!! + DelayedStatement!)
FunDecl ::== (Name + ArgList + TypeDecl?)
HexDigit ::== (Digit | [a..f] | [A..F])
HexLiteral ::== (<0x> + HexValue!)
HexValue ::== HexDigit+
Ident ::== (IdentFirstChar + IdentNextChar*)
IdentFirstChar ::== ([_] | Letter)
IdentNextChar ::== (IdentFirstChar | Digit)
IfStatement ::== (<if> + WS + ParanthesizedExpr! + DelayedStatement! + ElseStatement?!)
Implements ::== (<implements> + WS + <{>! + WS! + (TypeExpr + <;>! + WS!)*! + <}>!! + WS!!)
Import ::== (Name + (<as> + WS + Name)? + Initializer? + <;>! + WS!)
Imports ::== (<imports> + WS + <{>! + WS! + Import*! + <}>!! + WS!!)
Inherits ::== (<inherits> + WS + <{>! + WS! + (TypeExpr + <;>! + WS!)*! + <}>!! + WS!!)
Initializer ::== (<=> + WS + Expr!)
IntegerLiteral ::== ([-]? + Digit+)
Interface ::== (Annotations? + <interface> + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + <{>! + WS! + Inherits?! + EmptyMethods?! + <}>! + WS!)
Letter ::== (LowerCaseLetter | UpperCaseLetter)
LineComment ::== (<//> + UntilEndOfLine)
Literal ::== ((StringLiteral | CharLiteral | NumLiteral) + WS)
LowerCaseLetter ::== [a..z]
MapEachExpr ::== (<mapeach> + WS + <(>! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + <in>! + WS! + NestedExpr! + <)>! + WS! + Expr!!)
Method ::== (FunDecl + CodeBlock!)
Methods ::== (<methods> + WS + <{>! + WS! + Method*! + <}>!! + WS!!)
Module ::== (Annotations? + <module> + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + ModuleBody + TypeDefinition*)
ModuleBody ::== (<{>! + WS! + Imports?! + Inherits?! + Fields?! + Methods?! + <}>! + WS!)
Name ::== ((SpecialDelimiter^ + (Symbol | Ident)) + WS)
NestedExpr ::== Expr
NewExpr ::== (<new> + WS + TypeExpr! + ParanthesizedExpr! + (<from> + WS + NestedExpr)?)
NL ::== [\n]
Nullable ::== <?>
NumLiteral ::== (HexLiteral | BinaryLiteral | FloatLiteral | IntegerLiteral)
ParanthesizedExpr ::== (<(> + WS + Expr?! + <)>! + WS!)
ReturnStatement ::== (<return> + WS + Expr! + <;>! + WS!)
SelectExpr ::== (<select> + WS + <(>! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + <from>! + WS! + NestedExpr! + <)>! + WS! + NestedExpr!)
SpecialDelimiter ::== (<forall> + WS)
SpecialName ::== ((<null> | <true> | <false>) + WS)
Statement ::== (CodeBlock | VarDecl | IfStatement | SwitchStatement | ForEachStatement | ForStatement | WhileStatement | ReturnStatement | DeleteStatement | ExprStatement | EmptyStatement)
StringCharLiteral ::== (EscapeChar | (["]^ + AnyChar))
StringLiteral ::== (["] + StringCharLiteral* + ["])
SwitchStatement ::== (<switch> + WS + ParanthesizedExpr! + <{>! + WS! + CaseGroup! + DefaultStatement?! + <}>! + WS!)
Symbol ::== ([,] | [.~`!@#$%^&*-+|:<>=?/]+)
TypeArgs ::== (<<> + TypeExpr! + <>>! + WS!)
TypeDecl ::== (<:> + WS + TypeExpr! + Nullable?)
TypeDefinition ::== (Class | Interface | Enum)
TypeExpr ::== (TypeName + WS + TypeArgs?)
TypeExprList ::== (<{> + WS + (TypeExpr + <;>! + WS!)* + <}>! + WS!)
TypeName ::== (Ident + (<.> + WS + IdentFirstChar! + IdentNextChar*!)*)
UntilEndOfLine ::== ((AnyChar !NL)* NL)
UpperCaseLetter ::== [A..Z]
VarDecl ::== (<var> + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + TypeDecl?! + Initializer?! + <;>! + WS!)
WhileStatement ::== (<while> + WS + ParanthesizedExpr! + DelayedStatement!)
WS ::== ([ \t\n\r] | Comment)*
