AccumulateExpr ::== (accumulate + WS + (! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + Initializer! + forall! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + in! + WS! + DelayedExpr! + )! + WS! + DelayedExpr!)
Annotation ::== CompoundExpr
Annotations ::== ([ + WS + (Annotation + (, + WS + Annotation!)*)?! + ]! + WS!)
AnyChar ::== .
Arg ::== (Name + TypeDecl?)
ArgList ::== (( + WS + (Arg + (, + WS + Arg!)*)? + )! + WS!)
BasicExpr ::== (NewExpr | MapExpr | SelectExpr | AccumulateExpr | ReduceExpr | FunExpr | TableExpr | RecordExpr | SpecialName | Name | Literal | ParanthesizedExpr | BracketedExpr)
BinaryDigit ::== [01]
BinaryLiteral ::== (0b + BinaryValue!)
BinaryValue ::== BinaryDigit+
BlockComment ::== (/* + (CloseFullComment^ + AnyChar)*! + CloseFullComment!)
BracketedExpr ::== ([ + WS + (DelayedExpr + (, + WS + DelayedExpr!)*)?! + ]! + WS!)
CaseGroup ::== CaseStatement*
CaseStatement ::== (case + WS + ParanthesizedExpr! + CodeBlock!)
CharLiteral ::== (['] + StringCharLiteral + ['])
Class ::== (Annotations? + class + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + ClassBody)
ClassBody ::== ({! + WS! + Inherits?! + Implements?! + Fields?! + Methods?! + }! + WS!)
CloseFullComment ::== */
CodeBlock ::== ({ + WS + DelayedStatement* + }! + WS!)
Comment ::== (BlockComment | LineComment)
CompoundExpr ::== BasicExpr+
DefaultStatement ::== (default + WS + CodeBlock!)
DelayedBasicExpr ::== basicexpr
DelayedExpr ::== expr
DelayedStatement ::== Statement
DeleteStatement ::== (delete + WS + CompoundExpr! + ;! + WS!)
Digit ::== [0..9]
ElseStatement ::== (else + WS + DelayedStatement!)
EmptyMethod ::== (FunDecl + ;! + WS!)
EmptyMethods ::== (methods + WS + {! + WS! + EmptyMethod*! + }!! + WS!!)
EmptyStatement ::== Eos
EndOfInput ::== _eof_
Enum ::== (Annotations? + enum + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + EnumValues!)
EnumValue ::== (Name + Eos)
EnumValues ::== ({ + WS + EnumValue* + }! + WS!)
Eos ::== (; + WS)
EOSOrCodeBlock ::== (Eos | CodeBlock)
EOW ::== IdentNextChar^
EscapeChar ::== ([\] + AnyChar)
ExprStatement ::== (CompoundExpr + Eos)
Field ::== (Annotations? + Name + TypeDecl? + Initializer? + Eos)
Fields ::== (fields + WS + {! + WS! + Field*! + }!! + WS!!)
File ::== (Module + EndOfInput!)
FloatLiteral ::== ([-]? + Digit+ + [.] + Digit+)
ForEachParams ::== ((! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + TypeDecl?! + in! + WS! + CompoundExpr! + )! + WS!)
ForEachStatement ::== (foreach + WS + (!! + WS!! + (SpecialDelimiter^ + (Symbol | Ident))!! + WS!! + TypeDecl?!! + in!! + WS!! + CompoundExpr!! + )!! + WS!! + DelayedStatement!)
ForParams ::== ((! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + =! + WS! + CompoundExpr!! + ;! + WS! + CompoundExpr! + ;! + WS! + CompoundExpr! + )! + WS!)
ForStatement ::== (for + WS + (!! + WS!! + (SpecialDelimiter^ + (Symbol | Ident))!! + WS!! + =!! + WS!! + CompoundExpr!!! + ;!! + WS!! + CompoundExpr!! + ;!! + WS!! + CompoundExpr!! + )!! + WS!! + DelayedStatement!)
FunDecl ::== (Name + ArgList + TypeDecl?)
FunExpr ::== (function + WS + ArgList! + TypeDecl?! + CodeBlock!)
HexDigit ::== (Digit | [a..f] | [A..F])
HexLiteral ::== (0x + HexValue!)
HexValue ::== HexDigit+
Ident ::== (IdentFirstChar + IdentNextChar*)
IdentFirstChar ::== ([_] | Letter)
IdentNextChar ::== (IdentFirstChar | Digit)
IfStatement ::== (if + WS + ParanthesizedExpr! + DelayedStatement! + ElseStatement?!)
Implements ::== (implements + WS + {! + WS! + (TypeExpr + ;! + WS!)*! + }!! + WS!!)
Import ::== (Name + =! + WS! + new! + WS! + (Ident + (. + WS + IdentFirstChar! + IdentNextChar*!)*)! + WS! + ParanthesizedExpr! + ;! + WS!)
Imports ::== (imports + WS + {! + WS! + Import*! + }!! + WS!!)
Inherits ::== (inherits + WS + {! + WS! + (TypeExpr + ;! + WS!)*! + }!! + WS!!)
Initializer ::== (= + WS + CompoundExpr!)
IntegerLiteral ::== ([-]? + Digit+)
Interface ::== (Annotations? + interface + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + {! + WS! + Inherits?! + EmptyMethods?! + }! + WS!)
Letter ::== (LowerCaseLetter | UpperCaseLetter)
LineComment ::== (// + UntilEndOfLine)
Literal ::== ((VerbStringLiteral | StringLiteral | CharLiteral | NumLiteral) + WS)
LowerCaseLetter ::== [a..z]
MapExpr ::== (map + WS + (! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + in! + WS! + DelayedExpr! + )! + WS! + DelayedExpr!!)
Method ::== (Annotations? + FunDecl + CodeBlock!)
Methods ::== (methods + WS + {! + WS! + Method*! + }!! + WS!!)
Module ::== (Annotations? + module + WS + (Ident + (. + WS + IdentFirstChar! + IdentNextChar*!)*)! + WS! + ModuleBody + TypeDefinition*)
ModuleBody ::== ({! + WS! + Imports?! + Fields?! + Methods?! + }! + WS!)
Name ::== ((SpecialDelimiter^ + (Symbol | Ident)) + WS)
NewExpr ::== (new + WS + TypeExpr! + ParanthesizedExpr! + (from + WS + Name)?)
NL ::== [\n]
Nullable ::== (? + WS)
NumLiteral ::== (HexLiteral | BinaryLiteral | FloatLiteral | IntegerLiteral)
ParanthesizedExpr ::== (( + WS + (DelayedExpr + (, + WS + DelayedExpr!)*)?! + )! + WS!)
RecordExpr ::== (record + WS + ArgList! + {! + WS! + RecordFields! + }! + WS!)
RecordFields ::== (DelayedExpr + (, + WS + DelayedExpr!)*)?
ReduceExpr ::== (reduce + WS + (! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + ,! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + in! + WS! + DelayedExpr! + )! + WS! + DelayedExpr!!)
ReturnStatement ::== (return + WS + CompoundExpr?! + ;! + WS!)
Row ::== ((DelayedExpr + (, + WS + DelayedExpr!)*)? + Eos)
Rows ::== ({! + WS! + Row*! + }!! + WS!!)
SelectExpr ::== (select + WS + (! + WS! + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + from! + WS! + DelayedExpr! + )! + WS! + DelayedExpr!)
SpecialDelimiter ::== (forall + WS)
SpecialName ::== ((null | true | false) + WS)
Statement ::== (CodeBlock | VarDecl | IfStatement | SwitchStatement | ForEachStatement | ForStatement | WhileStatement | ReturnStatement | DeleteStatement | ExprStatement | EmptyStatement)
StringCharLiteral ::== (EscapeChar | ([\n"]^ + AnyChar))
StringLiteral ::== (["] + StringCharLiteral* + ["])
SwitchStatement ::== (switch + WS + ParanthesizedExpr! + {! + WS! + CaseGroup! + DefaultStatement?! + }! + WS!)
Symbol ::== [.~`!#$%^&*-+|:<>=?/]+
TableExpr ::== (table + WS + ArgList! + Rows!)
TypeArgs ::== (< + TypeExpr! + >! + WS!)
TypeDecl ::== (: + WS + TypeExpr! + Nullable?)
TypeDefinition ::== (Class | Interface | Enum)
TypeExpr ::== (TypeName + WS + TypeArgs?)
TypeExprList ::== ({ + WS + (TypeExpr + ;! + WS!)* + }! + WS!)
TypeName ::== ((Ident + (. + WS + IdentFirstChar! + IdentNextChar*!)*) + WS)
UntilEndOfLine ::== ((AnyChar !NL)* NL)
UpperCaseLetter ::== [A..Z]
VarDecl ::== (var + WS + (SpecialDelimiter^ + (Symbol | Ident))! + WS! + TypeDecl?! + Initializer?! + ;! + WS!)
VerbStringCharLiteral ::== ("" | (["]^ + AnyChar))
VerbStringLiteral ::== (@" + VerbStringCharLiteral*! + ["]!)
WhileStatement ::== (while + WS + ParanthesizedExpr! + DelayedStatement!)
WS ::== ([ \t\n\r] | Comment)*
