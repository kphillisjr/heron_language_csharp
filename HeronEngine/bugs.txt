Needs Attention
===============
- testing of switches.
- annotations need to be tested. 
- I am really not crazy about the function syntax.
- I want an interpreter mode.
- I want an eval function. 
- I want a better debugger.
    - Can I construct a debugger using meta-programming? 
    - In theory I could add a hidden argument to every function, and then to every function call.
- Demonstrating AOP would be easy by saying [Trace] in front of every function I want traced. 
    - Then I run through every function that is labeled trace, and I add a "trace".
     

Buglist
=======
- the action of invoking methods or fields on objects of type "Any" is poorly defined.
- when outputting compound expressions precedence may not be taken care of 
- I need to prevent passing and returning of "null", unless the type is explicitly optional.
- There are missing some basic interfaces. Heron should know what the ISequence, IIterator, and IList interfaces are
- The types should not be resolved before interpretation. That may be a mistake. 
- Forgetting a semicolon after a statement can cause weird expression parsing errors.
- "this" and "base" can be assigned to.

Features
========
- There could be an "IsEmpty()" method on sequences if we changed the iterator model slightly.
- I would like to explore implementing persistent structures in Heron
- Annotations is getting bumped to 1.1
- I may want modules (and maybe classes to) to have multiple base classes
- I want a check that the file name and module name match.
- Better error catching and reporting.
- Somehow make localization easy in Heron. (Resource strings?!)
- Modules should be managed by a module manager (like a Java class loader, or C# assembly loader)
     - Currently this is managed by the HeronProgram.
- I am not happy with how much work it is to define a function. 
    - It would be nice to have a shorthand.
    - For example passing a code block would be nice if I could just write "f { }. Instead of f(function() { })
    - Or perhaps f <- { } or f => { } or f -> { } or f . { } () 

Research Directions 
===================
- What are the formal semantics of Heron? 
- What can we prove about Heron? 
- What is the type system of Heron?
- Can we perform any rigorous transformations of Heron code? 
- Is there a smaller subset of Heron which is functionally equivalent.
	- What can we say about this version of Heron? 
- How can we represent second and higher order functions on a stack-model?
- What is the mapping of Heron to/from UML?
- How can we make Heron safe for concurrency?
- Does the lack of virtual functions offer a degree of safety?
